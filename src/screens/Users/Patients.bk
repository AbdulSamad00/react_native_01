import { useIsFocused, useNavigation } from "@react-navigation/core";
import dayjs from "dayjs";
import React, { useEffect, useState } from "react";
import { ScrollView, StyleSheet, View } from "react-native";
import { IconButton, Searchbar } from "react-native-paper";
import { deletePatient, getPatients } from "../../api/patients";
import ActivityIndicator from "../../components/ActivityIndicator";
import Table from "../../components/Datatable/AppTable";
import Header from "../../components/Header";

export function Patients({ navigation }) {
  const focus = useIsFocused();
  const [search, setSearch] = useState("");
  const [searchedPatients, setSearchedPatients] = useState([]);
  const [patients, setPatients] = useState();
  const [allPatients, setAllPatients] = useState([]);
  const [loading, setLoading] = useState(false);
  const [checkedPatients, setCheckedPatients] = useState([]);

  const callForPatients = async () => {
    setCheckedPatients([]);
    setPatients([]);
    setLoading(true);
    const { ok, data } = await getPatients();
    if (ok) {
      setAllPatients(data);
      const filterPatients = data.map((patient) => {
        return {
          id: patient._id,
          Avatar: patient.patients.imageSrc,
          Patientname: patient.patients.username,
          "Birth Date": dayjs(patient.dateBirth).format("DD-MM-YYYY"),
          Email: patient.email,
          Gender: patient.gender,
          "First Name": patient.patients.contactName.first,
          Initials: patient.patients.contactName.initials,
          "Last Name": patient.patients.contactName.last,
          Address1: patient.patients.Address.address1,
          Address2: patient.patients.Address.address2,
          Address3: patient.patients.Address.address3,
          "Zip Code": patient.patients.Address.zip,
          City: patient.patients.Address.city,
          State: patient.patients.Address.state,
          Country: patient.patients.Address.country,
          Phone: patient.patients.phones.phone,
          Mobile: patient.patients.phones.mobile,
          Skype: patient.patients.phones.skype,
          Mood: patient.mood,
          About: patient.about,
          IBAN: patient.bankInfo.IBAN,
          Bank: patient.bankInfo.bank,
          "Branch of Bank": patient.bankInfo.branchOfBank,
          "Prim InsuranceNo": patient.insurance.primInsuranceNo,
          "Prim Insurance": patient.insurance.primInsurance,
          "Prim Insurance ValidTill": patient.insurance.primInsuranceValidTill,
          "Sec. InsuranceNo": patient.insurance.secInsuranceNo,
          "Sec. Insurance": patient.insurance.secInsurance,
          "Sec. Insurance ValidTill": patient.insurance.secInsuranceValidTill,
          IDPaper: patient.identification.idPaper,
          "IDPaper ValidTill": patient.identification.idPaperValidTill,
        };
      });
      setPatients(filterPatients);
      setLoading(false);
    }
  };

  useEffect(() => {
    callForPatients();
  }, [focus]);

  const onChangeSearch = () => {
    const filtered = patients.filter(
      (el) =>
        `${el.Patientname}`.toLowerCase().startsWith(search.toLowerCase()) ||
        `${el.Email}`.toLowerCase().startsWith(search.toLowerCase())
    );
    setSearchedPatients(filtered);
  };

  return (
    <View style={{ flex: 1 }}>
      <ActivityIndicator visible={loading} />
      <Header back title={"Patients"} />
      <IconBar
        checkedPatients={checkedPatients}
        patients={allPatients}
        callForPatients={callForPatients}
      />
      <Searchbar
        style={styles.search}
        underlineColorAndroid="white"
        placeholder="Search"
        clearButtonMode="while-editing"
        value={search}
        onChangeText={(search) => {
          if (search.length < 1) {
            setSearchedPatients();
          } else {
            setSearch(search);
            onChangeSearch();
          }
        }}
      />
      {patients && patients.length > 0 && (
        <Table
          tableData={
            searchedPatients && searchedPatients.length > 0
              ? searchedPatients
              : patients
          }
          showCheckbox
          checked={checkedPatients}
          setChecked={setCheckedPatients}
        />
      )}
    </View>
  );
}

const IconBar = ({ checkedPatients, callForPatients, patients }) => {
  const { navigate } = useNavigation();

  return (
    <View style={{ height: 60, justifyContent: "center" }}>
      <ScrollView horizontal showsHorizontalScrollIndicator={false}>
        <IconButton
          icon="plus"
          style={{ marginLeft: 8, backgroundColor: "#07f" }}
          color="white"
          onPress={() => {
            navigate("OperationsPatient");
          }}
        />
        <IconButton
          icon="pencil"
          style={{ marginLeft: 8, backgroundColor: "yellow" }}
          color="black"
          onPress={async () => {
            if (checkedPatients.length < 1) {
              navigate("OperationsPatient");
            }

            const data = patients.filter(
              (patient) => patient._id == checkedPatients[0]
            )[0];
            const cleanPatient = {
              _id: data._id,
              username: data.patients.username,
              profile: data.profile,
              email: data.patients.email,
              password: data.patients.password,
              dateBirth: data.patients.dateBirth,
              gender: data.patients.gender,
              imageSrc: data.patients.imageSrc,
              prefix: data.patients.prefix,
              firstName: data.patients.contactName.first,
              initials: data.patients.contactName.initials,
              lastName: data.patients.contactName.last,
              address1: data.patients.Address.address1,
              address2: data.patients.Address.address2,
              address3: data.patients.Address.address3,
              city: data.patients.Address.city,
              zip: data.patients.Address.zip,
              state: data.patients.Address.state,
              country: data.patients.Address.country,
              phone: data.patients.phones.phone,
              mobile: data.patients.phones.mobile,
              skype: data.patients.phones.skype,
              IBAN: data.bankInfo.IBAN,
              bank: data.bankInfo.bank,
              branchOfBank: data.bankInfo.branchOfBank,
              primInsuranceNo: data.insurance.primInsuranceNo,
              primInsurance: data.insurance.primInsurance,
              primInsuranceValidTill: data.insurance.primInsuranceValidTill,
              secInsuranceNo: data.insurance.secInsuranceNo,
              secInsurance: data.insurance.secInsurance,
              secInsuranceValidTill: data.insurance.secInsuranceValidTill,
              idPaper: data.identification.idPaper,
              idPaperValidTill: data.identification.idPaperValidTill,
            };
            navigate("OperationsPatient", { selectedPatient: cleanPatient });
          }}
        />
        <IconButton
          icon="delete"
          style={{ marginLeft: 8, backgroundColor: "#f44" }}
          color="white"
          onPress={() => {
            if (checkedPatients.length < 1) return null;
            checkedPatients.forEach(async (patientId) => {
              const { ok } = await deletePatient(patientId);
              if (ok) {
                console.log("deleted");
                callForPatients();
              }
            });
          }}
        />
        <IconButton
          icon="file-delimited"
          style={{ marginLeft: 8, backgroundColor: "lime" }}
          color="white"
        />
        <IconButton
          icon="file-pdf-box"
          style={{ marginLeft: 8, backgroundColor: "red" }}
          color="white"
        />
        <IconButton
          icon="microsoft-excel"
          style={{ marginLeft: 8, backgroundColor: "green" }}
          color="white"
        />
        <IconButton
          icon="printer"
          style={{ marginLeft: 8, backgroundColor: "brown" }}
          color="white"
        />
        <IconButton
          icon="cloud-upload"
          style={{ marginLeft: 8, backgroundColor: "cyan" }}
          color="black"
        />
        <IconButton
          icon="lock"
          style={{ marginLeft: 8, backgroundColor: "red" }}
          color="white"
        />
        <IconButton
          icon="lock-open"
          style={{ marginLeft: 8, backgroundColor: "green" }}
          color="white"
        />
        <IconButton
          icon="hand-right"
          style={{ marginLeft: 8, backgroundColor: "red" }}
          color="white"
        />
        <IconButton
          icon="at"
          style={{ marginLeft: 8, backgroundColor: "#0af" }}
          color="white"
        />
        <IconButton
          icon="chat"
          style={{ marginLeft: 8, backgroundColor: "#0af" }}
          color="white"
        />
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "white",
  },
  rightContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "flex-end",
    paddingRight: 5,
    width: "100%",
  },
  search: {
    marginVertical: 10,
    marginHorizontal: 10,
    borderWidth: 0,
    shadowOpacity: 0,
    elevation: 0,
  },
});
